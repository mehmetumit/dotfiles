#!/bin/sh
#                                 _
#   ___ ___  _ ____   _____ _ __ (_) ___ _ __   ___ ___  ___
#  / __/ _ \| '_ \ \ / / _ \ '_ \| |/ _ \ '_ \ / __/ _ \/ __|
# | (_| (_) | | | \ V /  __/ | | | |  __/ | | | (_|  __/\__ \
#  \___\___/|_| |_|\_/ \___|_| |_|_|\___|_| |_|\___\___||___/
#
#
# Increase scroll key speed
xset r rate 300 50
# Swap capslock and escape for vim
setxkbmap -option caps:swapescape

get_git_branch() {
    git branch 2> /dev/null | awk '/*/{printf "(%s)", $2}'
}
get_git_status() {
    g_status=$(git status --porcelain 2>/dev/null || printf '0')
    [ ! -z "$g_status" ] && [ ! "$g_status" = '0' ] && printf '*' || printf ''
}
# Edit files from current location
edit_files() {
    files=$(find . -type f -not -path "*/\.git/*" -print 2>/dev/null | fzf --header='edit_files' --preview 'bat --style=numbers --color=always --line-range :500 {}') && $EDITOR -p "$files"
}
# Edit dotfiles with fzf
edit_dotfiles() {
    files=$(find "$HOME/dotfiles" -type f -not -path "*/\.git/*" -print | fzf --header='edit_dotfiles' --preview 'bat --style=numbers --color=always --line-range :500 {}' -m) && $EDITOR -p "$files"
}
# Start tmux at selected projects path
start_tmux_at_projects() {
    project_path=$(find "$HOME/Projects" -maxdepth 2 -type d -not -path "*/\.git/*" -print | fzf --no-multi --header='start_tmux_at_projects') && cd "$project_path" && tmux && cd - || return
}
# Start tmux at selected directory
start_tmux() {
    selected_path=$(find . -maxdepth 4 -type d -not -path "*/\.git/*" -print | fzf --no-multi --header='start_tmux') && cd "$selected_path" && tmux && cd - || return
}
# Change directory with fzf
quick_cd() {
    cd "$(find . -type d -not -path "*/\.git/*" -print | fzf --header='quick_cd' --no-multi)" || exit
}
# Use ranger to change directory
ranger_cd() {
    tmp="$(mktemp)"
    ranger --choosedir="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir" || exit
    fi
}
disk_usage() {
    du -h --max-depth=1 | sort -hr
}
search_command() {
    sh_name=$(ps -ocomm= -q $$)
    [ "$sh_name" = "zsh" ] && print -z "$(cat "$HOME/.bash_history" "$HOME/.zsh_history" | fzf --header='search_command')" || echo "$sh_name not supported!"
}
